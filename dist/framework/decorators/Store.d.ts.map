{"version":3,"sources":["framework/decorators/Store.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAE,YAAY,EAAE,KAAK,EAAC,MAAM,MAAM,CAAC;AAErD,8BAAsB,SAAS;IAC3B,UAAU,EAAE,GAAG,CAAC;IAChB,aAAa,EAAE,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACpC,eAAe,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;IAEnC,OAAO,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;;CASvB;AAED,wBAAgB,KAAK,IAAI,iBAAiB,CAiBzC;AAED,wBAAgB,MAAM,IAAI,eAAe,CAcxC;AAED,wBAAgB,QAAQ,IAAI,eAAe,CAc1C","file":"Store.d.ts","sourcesContent":["import {ActionTree, MutationTree, Store} from 'vuex';\r\n\r\nexport abstract class VuexStore {\r\n    __stateMap: any;\r\n    __actionsTree: ActionTree<any, any>;\r\n    __mutationsTree: MutationTree<any>;\r\n\r\n    __store: Store<any>;\r\n\r\n    constructor() {\r\n        this.__store = new Store<any>({\r\n            state: () => this.__stateMap,\r\n            actions: this.__actionsTree,\r\n            mutations: this.__mutationsTree\r\n        });\r\n    }\r\n}\r\n\r\nexport function State(): PropertyDecorator {\r\n    return (target: VuexStore, propertyKey: string) => {\r\n        // Init state props with null (so they can be reactive)\r\n        target.__stateMap = target.__stateMap || {};\r\n        target.__stateMap[propertyKey] = null;\r\n\r\n        Object.defineProperty(target, propertyKey, {\r\n            get() {\r\n                const state = this.__store.state;\r\n                return state[propertyKey];\r\n            },\r\n            set(value: any) {\r\n                const state = this.__store.state;\r\n                state[propertyKey] = value;\r\n            }\r\n        });\r\n    };\r\n}\r\n\r\nexport function Action(): MethodDecorator {\r\n    return (target: VuexStore, propertyKey: string, descriptor: any) => {\r\n        let memberMethod = descriptor.value;\r\n\r\n        target.__actionsTree = target.__actionsTree || {};\r\n        target.__actionsTree[propertyKey] = function (context, payload) {\r\n            return memberMethod(payload);\r\n        };\r\n\r\n        descriptor.value = function (payload: any) {\r\n            memberMethod = memberMethod.bind(this);\r\n            return this.__store.dispatch(propertyKey, payload);\r\n        };\r\n    };\r\n}\r\n\r\nexport function Mutation(): MethodDecorator {\r\n    return (target: VuexStore, propertyKey: string, descriptor: any) => {\r\n        let memberMethod = descriptor.value;\r\n\r\n        target.__mutationsTree = target.__mutationsTree || {};\r\n        target.__mutationsTree[propertyKey] = function (state, payload) {\r\n            return memberMethod(payload);\r\n        };\r\n\r\n        descriptor.value = function (payload: any) {\r\n            memberMethod = memberMethod.bind(this);\r\n            return this.__store.commit(propertyKey, payload);\r\n        };\r\n    };\r\n}"]}