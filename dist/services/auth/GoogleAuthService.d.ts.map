{"version":3,"sources":["services/auth/GoogleAuthService.ts"],"names":[],"mappings":"AAaA,qBACa,iBAAiB;IAG1B,OAAO,CAAC,aAAa,CAAgB;IAGrC,OAAO,CAAC,WAAW,CAAc;IAGjC,OAAO,CAAC,aAAa,CAAgB;IAGrC,OAAO,CAAC,YAAY,CAAe;IAE7B,eAAe;CAuBxB","file":"GoogleAuthService.d.ts","sourcesContent":["import {Inject, Service} from 'typedi';\r\nimport {ConfigService} from '../app/ConfigService';\r\nimport {HttpService} from '../app/HttpService';\r\nimport {IdentityStore} from '../../stores/auth/IdentityStore';\r\nimport {AxiosError} from 'axios';\r\nimport {ToastService} from '../ui/ToastService';\r\n\r\nimport $script from 'scriptjs';\r\n\r\nconst GOOGLEAPI_CDN_URL = 'https://apis.google.com/js/client.js?onload=OnGoogleLoadCallback';\r\n\r\nlet isGoogleApiLoaded = false;\r\n\r\n@Service()\r\nexport class GoogleAuthService {\r\n\r\n    @Inject()\r\n    private ConfigService: ConfigService;\r\n\r\n    @Inject()\r\n    private HttpService: HttpService;\r\n\r\n    @Inject()\r\n    private IdentityStore: IdentityStore;\r\n\r\n    @Inject()\r\n    private ToastService: ToastService;\r\n\r\n    async loginWithGoogle() {\r\n        const accessToken = await sendAuthRequestToGoogle();\r\n\r\n        try {\r\n            const response = await this.HttpService.api.auth.loginWithGoogle({\r\n                AccessToken: accessToken\r\n            });\r\n\r\n            await this.IdentityStore.fetchIdentity();\r\n\r\n            return response;\r\n        }\r\n        catch (error) {\r\n            if (error.response && error.response.status === 400) {\r\n                this.ToastService.error(`Could not sign in. Please try again.`);\r\n\r\n                await signOutFromGoogle();\r\n            }\r\n            else {\r\n                this.ToastService.error(error.message);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nasync function initGoogleAPI() {\r\n    if (isGoogleApiLoaded)\r\n        return;\r\n\r\n    return await new Promise(resolve => {\r\n        (window as any).OnGoogleLoadCallback = function () {\r\n            delete (window as any).OnGoogleLoadCallback;\r\n\r\n            gapi.client.init({\r\n                apiKey: 'AIzaSyBiuYS2xfCpFmhkDiz2WI8j5Fo4T1BlaAo' // TODO\r\n            });\r\n\r\n            isGoogleApiLoaded = true;\r\n\r\n            resolve();\r\n        };\r\n\r\n        // Load the Google script\r\n        $script(GOOGLEAPI_CDN_URL, () => {\r\n        });\r\n    });\r\n}\r\n\r\nasync function sendAuthRequestToGoogle(): Promise<string> {\r\n    await initGoogleAPI();\r\n\r\n    return await new Promise<string>((resolve, reject) => {\r\n        gapi.auth.authorize({\r\n                client_id: '445973792215-f7iin0g2ed8iouaeeq0s7cag8io6nhug.apps.googleusercontent.com', // TODO\r\n                scope: [\r\n                    'https://www.googleapis.com/auth/userinfo.profile',\r\n                    'https://www.googleapis.com/auth/userinfo.email'\r\n                ],\r\n                immediate: false\r\n            },\r\n            (authResult) => {\r\n                if (authResult.error && authResult.error !== 'popup_closed_by_user') {\r\n                    return reject(new Error(authResult.error));\r\n                }\r\n\r\n                resolve(authResult.access_token);\r\n            }\r\n        );\r\n    });\r\n}\r\n\r\nasync function signOutFromGoogle(): Promise<void> {\r\n    await initGoogleAPI();\r\n\r\n    gapi.auth.setToken(null);\r\n    gapi.auth.signOut();\r\n}"]}