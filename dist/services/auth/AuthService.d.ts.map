{"version":3,"sources":["services/auth/AuthService.ts"],"names":[],"mappings":"AAIA,qBAAa,WAAW;IAGpB,OAAO,CAAC,WAAW,CAAc;IAGjC,OAAO,CAAC,aAAa,CAAgB;IAE/B,EAAE;IAIF,KAAK,CAAC,eAAe,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM;IAW/C,MAAM;IAIN,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM;CAOjE","file":"AuthService.d.ts","sourcesContent":["import di, {Require} from '../../di';\r\nimport {HttpService} from '../app/HttpService';\r\nimport {IdentityStore} from '../../stores/auth/IdentityStore';\r\n\r\nexport class AuthService {\r\n\r\n    @Require()\r\n    private HttpService: HttpService;\r\n\r\n    @Require()\r\n    private IdentityStore: IdentityStore;\r\n\r\n    async me() {\r\n        return await this.HttpService.auth.me();\r\n    }\r\n\r\n    async login(emailOrUsername: string, password: string) {\r\n        const response = await this.HttpService.auth.login({\r\n            Email: emailOrUsername,\r\n            Password: password\r\n        });\r\n\r\n        await this.IdentityStore.fetchIdentity();\r\n\r\n        return response;\r\n    }\r\n\r\n    async logout() {\r\n        return await this.HttpService.auth.logout();\r\n    }\r\n\r\n    async signup(username: string, email: string, password: string) {\r\n        return await this.HttpService.auth.signup({\r\n            UserName: username,\r\n            Email: email,\r\n            Password: password\r\n        });\r\n    }\r\n}\r\n\r\ndi.service('AuthService', AuthService);"]}