{"version":3,"sources":["services/auth/GoogleAuthService.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,MAAM,EAAE,OAAO,EAAC,MAAM,QAAQ,CAAC;AACvC,OAAO,EAAC,aAAa,EAAC,MAAM,sBAAsB,CAAC;AACnD,OAAO,EAAC,WAAW,EAAC,MAAM,oBAAoB,CAAC;AAC/C,OAAO,EAAC,aAAa,EAAC,MAAM,iCAAiC,CAAC;AAE9D,OAAO,OAAO,MAAM,UAAU,CAAC;AAE/B,IAAM,iBAAiB,GAAG,kEAAkE,CAAC;AAE7F,IAAI,iBAAiB,GAAG,KAAK,CAAC;AAG9B;IAAA;IAsBA,CAAC;IAXS,2CAAe,GAArB;;;;;4BACsB,WAAM,uBAAuB,EAAE,EAAA;;wBAA3C,SAAS,GAAG,SAA+B;wBAEhC,WAAM,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC;gCAC7D,SAAS,EAAE,SAAS;6BACvB,CAAC,EAAA;;wBAFI,QAAQ,GAAG,SAEf;wBAEF,WAAM,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,EAAA;;wBAAxC,SAAwC,CAAC;wBAEzC,WAAO,QAAQ,EAAC;;;;KACnB;IAlBD;QADC,MAAM,EAAE;0CACc,aAAa;4DAAC;IAGrC;QADC,MAAM,EAAE;0CACY,WAAW;0DAAC;IAGjC;QADC,MAAM,EAAE;0CACc,aAAa;4DAAC;IAT5B,iBAAiB;QAD7B,OAAO,EAAE;OACG,iBAAiB,CAsB7B;IAAD,wBAAC;CAtBD,AAsBC,IAAA;SAtBY,iBAAiB;AAwB9B,SAAe,aAAa;;;;;oBACxB,IAAI,iBAAiB;wBACjB,WAAO;oBAEJ,WAAM,IAAI,OAAO,CAAC,UAAA,OAAO;4BAC3B,MAAc,CAAC,oBAAoB,GAAG;gCACnC,OAAQ,MAAc,CAAC,oBAAoB,CAAC;gCAE5C,iBAAiB,GAAG,IAAI,CAAC;gCAEzB,OAAO,EAAE,CAAC;4BACd,CAAC,CAAC;4BAGF,OAAO,CAAC,iBAAiB,EAAE;4BAC3B,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,EAAA;wBAZF,WAAO,SAYL,EAAC;;;;CACN;AAED,SAAe,uBAAuB;;;;wBAClC,WAAM,aAAa,EAAE,EAAA;;oBAArB,SAAqB,CAAC;oBAEf,WAAM,IAAI,OAAO,CAAS,UAAC,OAAO,EAAE,MAAM;4BAC7C,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,yCAAyC,CAAC,CAAC;4BAEjE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;gCACZ,SAAS,EAAE,0EAA0E;gCACrF,KAAK,EAAE;oCACH,kDAAkD;oCAClD,gDAAgD;oCAChD,mDAAmD;iCACtD;gCACD,SAAS,EAAE,KAAK;6BACnB,EACD,UAAC,UAAU;gCACP,IAAI,UAAU,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,KAAK,sBAAsB,EAAE;oCACjE,OAAO,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;iCACnC;gCAED,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;4BACrC,CAAC,CACJ,CAAC;wBACN,CAAC,CAAC,EAAA;wBApBF,WAAO,SAoBL,EAAC;;;;CACN","file":"GoogleAuthService.js","sourcesContent":["import {Inject, Service} from 'typedi';\r\nimport {ConfigService} from '../app/ConfigService';\r\nimport {HttpService} from '../app/HttpService';\r\nimport {IdentityStore} from '../../stores/auth/IdentityStore';\r\n\r\nimport $script from 'scriptjs';\r\n\r\nconst GOOGLEAPI_CDN_URL = 'https://apis.google.com/js/client.js?onload=OnGoogleLoadCallback';\r\n\r\nlet isGoogleApiLoaded = false;\r\n\r\n@Service()\r\nexport class GoogleAuthService {\r\n\r\n    @Inject()\r\n    private ConfigService: ConfigService;\r\n\r\n    @Inject()\r\n    private HttpService: HttpService;\r\n\r\n    @Inject()\r\n    private IdentityStore: IdentityStore;\r\n\r\n    async loginWithGoogle() {\r\n        const authToken = await sendAuthRequestToGoogle();\r\n\r\n        const response = await this.HttpService.api.auth.loginWithGoogle({\r\n            AuthToken: authToken\r\n        });\r\n\r\n        await this.IdentityStore.fetchIdentity();\r\n\r\n        return response;\r\n    }\r\n}\r\n\r\nasync function initGoogleAPI() {\r\n    if (isGoogleApiLoaded)\r\n        return;\r\n\r\n    return await new Promise(resolve => {\r\n        (window as any).OnGoogleLoadCallback = function () {\r\n            delete (window as any).OnGoogleLoadCallback;\r\n\r\n            isGoogleApiLoaded = true;\r\n\r\n            resolve();\r\n        };\r\n\r\n        // Load the Google script\r\n        $script(GOOGLEAPI_CDN_URL, () => {\r\n        });\r\n    });\r\n}\r\n\r\nasync function sendAuthRequestToGoogle(): Promise<string> {\r\n    await initGoogleAPI();\r\n\r\n    return await new Promise<string>((resolve, reject) => {\r\n        gapi.client.setApiKey('AIzaSyBiuYS2xfCpFmhkDiz2WI8j5Fo4T1BlaAo'); //TODO\r\n\r\n        gapi.auth.authorize({\r\n                client_id: '445973792215-f7iin0g2ed8iouaeeq0s7cag8io6nhug.apps.googleusercontent.com', //TODO\r\n                scope: [\r\n                    'https://www.googleapis.com/auth/userinfo.profile',\r\n                    'https://www.googleapis.com/auth/userinfo.email',\r\n                    'https://www.googleapis.com/auth/contacts.readonly'\r\n                ],\r\n                immediate: false\r\n            },\r\n            (authResult) => {\r\n                if (authResult.error && authResult.error !== 'popup_closed_by_user') {\r\n                    return reject(authResult.error);\r\n                }\r\n\r\n                resolve(authResult.access_token);\r\n            }\r\n        );\r\n    });\r\n}"]}