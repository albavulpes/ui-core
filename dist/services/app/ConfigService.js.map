{"version":3,"sources":["services/app/ConfigService.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,OAAO,EAAC,MAAM,QAAQ,CAAC;AAC/B,OAAO,KAAK,MAAM,cAAc,CAAC;AAqBjC;IADA;QAEI,kBAAa,GAA+B,EAAE,CAAC;IAKnD,CAAC;IAHG,iCAAS,GAAT,UAAgD,SAAe,EAAE,aAAsC;QACnG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE,aAAa,CAAC,CAAC;IAChG,CAAC;IALQ,aAAa;QADzB,OAAO,EAAE;OACG,aAAa,CAMzB;IAAD,oBAAC;CAND,AAMC,IAAA;SANY,aAAa","file":"ConfigService.js","sourcesContent":["import {Service} from 'typedi';\r\nimport merge from 'lodash/merge';\r\nimport {IHttpOptions} from './HttpService';\r\nimport {IToastOptions} from '../ui/ToastService';\r\n\r\nexport interface IConfigService {\r\n    configuration: Partial<IConfigurationMap>;\r\n\r\n    configure<TKey extends keyof IConfigurationMap>(configKey: TKey, configuration: IConfigurationMap[TKey]): void;\r\n}\r\n\r\nexport interface IConfigOptions {\r\n    api: boolean;\r\n}\r\n\r\nexport interface IConfigurationMap {\r\n    config: IConfigOptions;\r\n    http: IHttpOptions;\r\n    toast: IToastOptions;\r\n}\r\n\r\n@Service()\r\nexport class ConfigService implements IConfigService {\r\n    configuration: Partial<IConfigurationMap> = {};\r\n\r\n    configure<TKey extends keyof IConfigurationMap>(configKey: TKey, configuration: IConfigurationMap[TKey]) {\r\n        this.configuration[configKey] = merge((this.configuration[configKey] || {}), configuration);\r\n    }\r\n}\r\n"]}