{"version":3,"sources":["services/app/HttpService.ts"],"names":[],"mappings":"AAEA,OAAO,IAAI,MAAM,0BAA0B,CAAC;AAC5C,OAAO,MAAM,MAAM,4BAA4B,CAAC;AAGhD,QAAA,MAAM,eAAe;;;CAGpB,CAAC;AA8BF,aAAK,YAAY,GAAG,OAAO,eAAe,CAAC;AAC3C,aAAK,oBAAoB,GAAG;KACvB,CAAC,IAAI,MAAM,YAAY,GAAG,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;CAC3D,CAAA;AACD,oBAAY,WAAW,GAAG,oBAAoB,CAAC","file":"HttpService.d.ts","sourcesContent":["import {Inject, Service} from 'typedi';\r\nimport axios, {AxiosInstance, AxiosRequestConfig} from 'axios';\r\nimport auth from '../../api/endpoints/auth';\r\nimport comics from '../../api/endpoints/comics';\r\nimport {ConfigService} from './ConfigService';\r\n\r\nconst __endpointDefns = {\r\n    auth,\r\n    comics\r\n};\r\n\r\n@Service('HttpService')\r\nclass HttpApiClass {\r\n\r\n    @Inject()\r\n    ConfigService: ConfigService;\r\n\r\n    protected readonly _adapter: AxiosInstance;\r\n\r\n    constructor() {\r\n        this._adapter = axios.create(this.ConfigService.configuration.http);\r\n\r\n        this.createEndpointInstances();\r\n    }\r\n\r\n    private createEndpointInstances() {\r\n        const self = this;\r\n\r\n        for (let endpointName in __endpointDefns) {\r\n            Object.defineProperty(self, endpointName, {\r\n                get() {\r\n                    return new (__endpointDefns as any)[endpointName](this._adapter);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// The typing magic here is to tell TypeScript that this class is internally going to have all the endpoints.\r\ntype EndpointsMap = typeof __endpointDefns;\r\ntype EndpointInstancesMap = {\r\n    [K in keyof EndpointsMap]: InstanceType<EndpointsMap[K]>;\r\n}\r\nexport type HttpService = EndpointInstancesMap;\r\n"]}