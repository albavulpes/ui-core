{"version":3,"sources":["services/app/ConfigService.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,YAAY,EAAC,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAC,aAAa,EAAC,MAAM,oBAAoB,CAAC;AAEjD,MAAM,WAAW,cAAc;IAC3B,aAAa,EAAE,OAAO,CAAC,iBAAiB,CAAC,CAAC;IAE1C,SAAS,CAAC,IAAI,SAAS,MAAM,iBAAiB,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,EAAE,iBAAiB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;CAClH;AAED,MAAM,WAAW,cAAc;IAC3B,GAAG,EAAE,OAAO,CAAC;CAChB;AAED,MAAM,WAAW,iBAAiB;IAC9B,MAAM,EAAE,cAAc,CAAC;IACvB,IAAI,EAAE,YAAY,CAAC;IACnB,KAAK,EAAE,aAAa,CAAC;CACxB;AAED,qBACa,aAAc,YAAW,cAAc;IAChD,aAAa,EAAE,OAAO,CAAC,iBAAiB,CAAC,CAAM;IAE/C,SAAS,CAAC,IAAI,SAAS,MAAM,iBAAiB,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,EAAE,iBAAiB,CAAC,IAAI,CAAC;CAG1G","file":"ConfigService.d.ts","sourcesContent":["import {Service} from 'typedi';\r\nimport merge from 'lodash/merge';\r\nimport {IHttpOptions} from './HttpService';\r\nimport {IToastOptions} from '../ui/ToastService';\r\n\r\nexport interface IConfigService {\r\n    configuration: Partial<IConfigurationMap>;\r\n\r\n    configure<TKey extends keyof IConfigurationMap>(configKey: TKey, configuration: IConfigurationMap[TKey]): void;\r\n}\r\n\r\nexport interface IConfigOptions {\r\n    api: boolean;\r\n}\r\n\r\nexport interface IConfigurationMap {\r\n    config: IConfigOptions;\r\n    http: IHttpOptions;\r\n    toast: IToastOptions;\r\n}\r\n\r\n@Service({global: true})\r\nexport class ConfigService implements IConfigService {\r\n    configuration: Partial<IConfigurationMap> = {};\r\n\r\n    configure<TKey extends keyof IConfigurationMap>(configKey: TKey, configuration: IConfigurationMap[TKey]) {\r\n        this.configuration[configKey] = merge((this.configuration[configKey] || {}), configuration);\r\n    }\r\n}\r\n"]}