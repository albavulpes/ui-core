{"version":3,"sources":["api/endpoints/pages.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,gBAAgB,CAAC;AAE3C,MAAM,CAAC,OAAO,MAAO,SAAQ,WAAW;IAC9B,MAAM,CAAC,SAAS,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;IAU1C,GAAG,CAAC,EAAE,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IAM9B,eAAe,CAAC,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IAWrE,eAAe,CAAC,MAAM,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IAM9C,WAAW,CAAC,MAAM,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IAM1C,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAM/B,GAAG,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAM1C,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;IAUlD,OAAO,CAAC,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;CAK1D","file":"pages.d.ts","sourcesContent":["import {ApiEndpoint} from '../ApiEndpoint';\r\n\r\nexport default class extends ApiEndpoint {\r\n    async getAll(chapterId: string): Promise<Page[]> {\r\n        const response = await this.adapter.get<Page[]>('/pages', {\r\n            params: {\r\n                chapterId\r\n            }\r\n        });\r\n\r\n        return response.data;\r\n    }\r\n\r\n    async get(id: string): Promise<Page> {\r\n        const response = await this.adapter.get<Page>(`/pages/${id}`);\r\n\r\n        return response.data;\r\n    }\r\n\r\n    async getByPageNumber(chapterId: string, pageNumber: number): Promise<Page> {\r\n        const response = await this.adapter.get<Page>('/pages', {\r\n            params: {\r\n                chapterId,\r\n                pageNumber\r\n            }\r\n        });\r\n\r\n        return response.data;\r\n    }\r\n\r\n    async getPreviousPage(pageId: string): Promise<Page> {\r\n        const response = await this.adapter.get<Page>(`/pages/${pageId}/previous`);\r\n\r\n        return response.data;\r\n    }\r\n\r\n    async getNextPage(pageId: string): Promise<Page> {\r\n        const response = await this.adapter.get<Page>(`/pages/${pageId}/next`);\r\n\r\n        return response.data;\r\n    }\r\n\r\n    async post(data: Page): Promise<Page> {\r\n        const response = await this.adapter.post<Page>(`/pages`, data);\r\n\r\n        return response.data;\r\n    }\r\n\r\n    async put(id: string, data: Page): Promise<Page> {\r\n        const response = await this.adapter.put<Page>(`/pages/${id}`, data);\r\n\r\n        return response.data;\r\n    }\r\n\r\n    async publish(id: string, state: boolean): Promise<Page> {\r\n        const response = await this.adapter.put<Page>(`/pages/${id}/publish`, null, {\r\n            params: {\r\n                state\r\n            }\r\n        });\r\n\r\n        return response.data;\r\n    }\r\n\r\n    async reorder(id: string, index: number): Promise<Page> {\r\n        const response = await this.adapter.put<Page>(`/pages/${id}/reorder/${index}`);\r\n\r\n        return response.data;\r\n    }\r\n}"]}