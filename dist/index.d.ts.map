{"version":3,"sources":["index.ts"],"names":[],"mappings":";AACA,OAAO,kBAAkB,CAAC;AAC1B,OAAY,EAAC,YAAY,EAAiB,MAAM,KAAK,CAAC;AAGtD,OAAO,EAAgB,iBAAiB,EAAC,MAAM,8BAA8B,CAAC;;AAqB9E,wBAIqC","file":"index.d.ts","sourcesContent":["/// <reference path=\"./types/aspnet.apitypes.d.ts\" />\r\nimport 'reflect-metadata';\r\nimport Vue, {PluginObject, VueConstructor} from 'vue';\r\nimport {Container, Inject, Service} from 'typedi';\r\n\r\nimport {ConfigService, IConfigurationMap} from './services/app/ConfigService';\r\n\r\n@Service()\r\nclass UiCore {\r\n\r\n    @Inject()\r\n    private ConfigService: ConfigService;\r\n\r\n    async initCore(Vue: VueConstructor<Vue>, options: Partial<IConfigurationMap>) {\r\n        if (options.config) {\r\n            this.ConfigService.configure('config', options.config);\r\n        }\r\n        if (options.http) {\r\n            this.ConfigService.configure('http', options.http);\r\n        }\r\n        if (options.toast) {\r\n            this.ConfigService.configure('toast', options.toast);\r\n        }\r\n    }\r\n}\r\n\r\nexport default {\r\n    async install(Vue, options) {\r\n        await Container.get(UiCore).initCore(Vue, options);\r\n    }\r\n} as PluginObject<IConfigurationMap>;\r\n"]}