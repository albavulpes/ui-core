{"version":3,"sources":["di.ts"],"names":[],"mappings":"AAAA,OAAO,kBAAkB,CAAC;AAC1B,OAAO,MAAM,MAAM,UAAU,CAAC;AAE9B,QAAA,MAAM,MAAM,QAAe,CAAC;AAE5B,wBAAgB,OAAO,CAAC,WAAW,EAAE,MAAM,GAAG,cAAc,CAM3D;AAED,wBAAgB,OAAO,CAAC,WAAW,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC,UAAU,KAAK,GAAG,GAAG,cAAc,CAQnH;AAED,wBAAgB,OAAO,IAAI,iBAAiB,CAc3C;AAED,eAAe,MAAM,CAAC","file":"di.d.ts","sourcesContent":["import 'reflect-metadata';\r\nimport Bottle from 'bottlejs';\r\n\r\nconst bottle = new Bottle();\r\n\r\nexport function Service(serviceName: string): ClassDecorator {\r\n    return (constructor: any) => {\r\n        Reflect.defineMetadata('service:name', serviceName, constructor);\r\n\r\n        bottle.service(serviceName, constructor);\r\n    }\r\n}\r\n\r\nexport function Factory(serviceName: string, factoryFunction: (container: Bottle.IContainer) => any): ClassDecorator {\r\n    return (constructor: any) => {\r\n        Reflect.defineMetadata('service:name', serviceName, constructor);\r\n\r\n        bottle.factory(serviceName, factoryFunction);\r\n\r\n        return constructor;\r\n    }\r\n}\r\n\r\nexport function Require(): PropertyDecorator {\r\n    return (prototype: any, propertyKey: string) => {\r\n        const designType = Reflect.getMetadata('design:type', prototype, propertyKey) as Function;\r\n        const serviceName = Reflect.getMetadata('service:name', designType);\r\n\r\n        if (delete prototype[propertyKey]) {\r\n            Object.defineProperty(prototype, propertyKey, {\r\n                get() {\r\n                    console.info(`Resolved dependency: ${serviceName}`);\r\n                    return bottle.container[serviceName];\r\n                }\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nexport default bottle;"]}