{"version":3,"sources":["di.ts"],"names":[],"mappings":"AAAA,OAAO,kBAAkB,CAAC;AAC1B,OAAO,MAAM,MAAM,UAAU,CAAC;AAE9B,IAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AAE5B,MAAM,UAAU,OAAO,CAAC,WAAmB;IACvC,OAAO,UAAC,WAAgB;QACpB,OAAO,CAAC,cAAc,CAAC,cAAc,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;QAEjE,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IAC7C,CAAC,CAAA;AACL,CAAC;AAED,MAAM,UAAU,OAAO,CAAC,WAAmB,EAAE,eAAsD;IAC/F,OAAO,UAAC,WAAgB;QACpB,OAAO,CAAC,cAAc,CAAC,cAAc,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;QAEjE,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;QAE7C,OAAO,WAAW,CAAC;IACvB,CAAC,CAAA;AACL,CAAC;AAED,MAAM,UAAU,OAAO;IACnB,OAAO,UAAC,SAAc,EAAE,WAAmB;QACvC,IAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,SAAS,EAAE,WAAW,CAAa,CAAC;QAC1F,IAAM,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;QAEpE,IAAI,OAAO,SAAS,CAAC,WAAW,CAAC,EAAE;YAC/B,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,EAAE;gBAC1C,GAAG;oBACC,OAAO,CAAC,IAAI,CAAC,0BAAwB,WAAa,CAAC,CAAC;oBACpD,OAAO,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;gBACzC,CAAC;aACJ,CAAC,CAAC;SACN;IACL,CAAC,CAAC;AACN,CAAC;AAED,eAAe,MAAM,CAAC","file":"di.js","sourcesContent":["import 'reflect-metadata';\r\nimport Bottle from 'bottlejs';\r\n\r\nconst bottle = new Bottle();\r\n\r\nexport function Service(serviceName: string): ClassDecorator {\r\n    return (constructor: any) => {\r\n        Reflect.defineMetadata('service:name', serviceName, constructor);\r\n\r\n        bottle.service(serviceName, constructor);\r\n    }\r\n}\r\n\r\nexport function Factory(serviceName: string, factoryFunction: (container: Bottle.IContainer) => any): ClassDecorator {\r\n    return (constructor: any) => {\r\n        Reflect.defineMetadata('service:name', serviceName, constructor);\r\n\r\n        bottle.factory(serviceName, factoryFunction);\r\n\r\n        return constructor;\r\n    }\r\n}\r\n\r\nexport function Require(): PropertyDecorator {\r\n    return (prototype: any, propertyKey: string) => {\r\n        const designType = Reflect.getMetadata('design:type', prototype, propertyKey) as Function;\r\n        const serviceName = Reflect.getMetadata('service:name', designType);\r\n\r\n        if (delete prototype[propertyKey]) {\r\n            Object.defineProperty(prototype, propertyKey, {\r\n                get() {\r\n                    console.info(`Resolved dependency: ${serviceName}`);\r\n                    return bottle.container[serviceName];\r\n                }\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nexport default bottle;"]}