{"version":3,"sources":["stores/auth/IdentityStore.ts"],"names":[],"mappings":"AACA,OAAO,EAA0B,SAAS,EAAC,MAAM,kCAAkC,CAAC;AAMpF,qBACa,aAAc,SAAQ,SAAS;IAGxC,OAAO,CAAC,WAAW,CAAc;IAGjC,OAAO,CAAC,YAAY,CAAe;IAGnC,OAAO,CAAC,aAAa,CAAgB;IAGrC,eAAe,EAAE,OAAO,CAAC;IAGzB,QAAQ,EAAE,MAAM,CAAC;IAGjB,KAAK,EAAE,MAAM,CAAC;IAGR,aAAa;IAoBnB,OAAO,CAAC,cAAc;CAKzB","file":"IdentityStore.d.ts","sourcesContent":["import {Inject, Service} from 'typedi';\r\nimport {Action, Mutation, State, VuexStore} from '../../framework/decorators/Store';\r\n\r\nimport {AuthService} from '../../services/auth/AuthService';\r\nimport {ToastService} from '../../services/ui/ToastService';\r\nimport {LoaderService} from '../../services/ui/LoaderService';\r\n\r\n@Service()\r\nexport class IdentityStore extends VuexStore {\r\n\r\n    @Inject(type => AuthService)\r\n    private AuthService: AuthService;\r\n\r\n    @Inject()\r\n    private ToastService: ToastService;\r\n\r\n    @Inject()\r\n    private LoaderService: LoaderService;\r\n\r\n    @State()\r\n    IsAuthenticated: boolean;\r\n\r\n    @State()\r\n    UserName: string;\r\n\r\n    @State()\r\n    Email: string;\r\n\r\n    @Action()\r\n    async fetchIdentity() {\r\n        this.LoaderService.show();\r\n\r\n        try {\r\n            const statusResponse = await this.AuthService.me();\r\n\r\n            this.updateIdentity(statusResponse);\r\n        }\r\n        catch (error) {\r\n            if (error.response && error.response.status !== 401) {\r\n                this.ToastService.error(error.message);\r\n            }\r\n\r\n            this.IsAuthenticated = false;\r\n        }\r\n\r\n        this.LoaderService.hide();\r\n    }\r\n\r\n    @Mutation()\r\n    private updateIdentity(identity: StatusResponse) {\r\n        this.UserName = identity.UserName;\r\n        this.Email = identity.Email;\r\n        this.IsAuthenticated = true;\r\n    }\r\n}\r\n"]}