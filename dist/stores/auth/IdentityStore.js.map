{"version":3,"sources":["stores/auth/IdentityStore.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,MAAM,EAAE,OAAO,EAAC,MAAM,QAAQ,CAAC;AACvC,OAAO,EAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAC,MAAM,kCAAkC,CAAC;AAEpF,OAAO,EAAC,WAAW,EAAC,MAAM,iCAAiC,CAAC;AAC5D,OAAO,EAAC,YAAY,EAAC,MAAM,gCAAgC,CAAC;AAC5D,OAAO,EAAC,aAAa,EAAC,MAAM,iCAAiC,CAAC;AAG9D;IAAmC,yCAAS;IAA5C;;IA8CA,CAAC;IAzBS,qCAAa,GAAnB;;;;;;wBACI,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;;;;wBAGC,WAAM,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,EAAA;;wBAA5C,cAAc,GAAG,SAA2B;wBAElD,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;;;;wBAGpC,IAAI,OAAK,CAAC,QAAQ,IAAI,OAAK,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;4BACjD,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAK,CAAC,OAAO,CAAC,CAAC;yBAC1C;wBAED,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;;;wBAGjC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;;;;;KAC7B;IAGO,sCAAc,GAAtB,UAAuB,QAAwB;QAC3C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAClC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QAC5B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IAChC,CAAC;IA1CD;QADC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,WAAW,EAAX,CAAW,CAAC;0CACP,WAAW;sDAAC;IAGjC;QADC,MAAM,EAAE;0CACa,YAAY;uDAAC;IAGnC;QADC,MAAM,EAAE;0CACc,aAAa;wDAAC;IAGrC;QADC,KAAK,EAAE;;0DACiB;IAGzB;QADC,KAAK,EAAE;;mDACS;IAGjB;QADC,KAAK,EAAE;;gDACM;IAGd;QADC,MAAM,EAAE;;;;sDAkBR;IAGD;QADC,QAAQ,EAAE;;;;uDAKV;IA7CQ,aAAa;QADzB,OAAO,EAAE;OACG,aAAa,CA8CzB;IAAD,oBAAC;CA9CD,AA8CC,CA9CkC,SAAS,GA8C3C;SA9CY,aAAa","file":"IdentityStore.js","sourcesContent":["import {Inject, Service} from 'typedi';\r\nimport {Action, Mutation, State, VuexStore} from '../../framework/decorators/Store';\r\n\r\nimport {AuthService} from '../../services/auth/AuthService';\r\nimport {ToastService} from '../../services/ui/ToastService';\r\nimport {LoaderService} from '../../services/ui/LoaderService';\r\n\r\n@Service()\r\nexport class IdentityStore extends VuexStore {\r\n\r\n    @Inject(type => AuthService)\r\n    private AuthService: AuthService;\r\n\r\n    @Inject()\r\n    private ToastService: ToastService;\r\n\r\n    @Inject()\r\n    private LoaderService: LoaderService;\r\n\r\n    @State()\r\n    IsAuthenticated: boolean;\r\n\r\n    @State()\r\n    UserName: string;\r\n\r\n    @State()\r\n    Email: string;\r\n\r\n    @Action()\r\n    async fetchIdentity() {\r\n        this.LoaderService.show();\r\n\r\n        try {\r\n            const statusResponse = await this.AuthService.me();\r\n\r\n            this.updateIdentity(statusResponse);\r\n        }\r\n        catch (error) {\r\n            if (error.response && error.response.status !== 401) {\r\n                this.ToastService.error(error.message);\r\n            }\r\n\r\n            this.IsAuthenticated = false;\r\n        }\r\n\r\n        this.LoaderService.hide();\r\n    }\r\n\r\n    @Mutation()\r\n    private updateIdentity(identity: StatusResponse) {\r\n        this.UserName = identity.UserName;\r\n        this.Email = identity.Email;\r\n        this.IsAuthenticated = true;\r\n    }\r\n}\r\n"]}